<Window
    x:Class="AugmentationSampleEditor.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:editor="clr-namespace:RoslynPad.Editor;assembly=RoslynPad.Editor.Windows"
    xmlns:local="clr-namespace:AugmentationSampleEditor"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:viewModels="clr-namespace:AugmentationSampleEditor.ViewModels"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    Title="MainWindow"
    Width="800"
    Height="800"
    mc:Ignorable="d">

    <TabControl ItemsSource="{Binding ViewModels}">
        <TabControl.ItemTemplate>
            <DataTemplate DataType="viewModels:ISampleContent">
                <TextBlock Text="{Binding Title}" />
            </DataTemplate>
        </TabControl.ItemTemplate>
        <TabControl.ContentTemplate>
            <DataTemplate DataType="viewModels:ISampleContent">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <CheckBox Name="Checker" IsChecked="{Binding IsEnabled, Mode=TwoWay}">
                        Enable Augmentations
                    </CheckBox>
                    <editor:CodeTextEditor
                        Name="Editor"
                        Grid.Row="1"
                        Document="{Binding Document}"
                        FontSize="24"
                        WordWrap="True">
                        <b:Interaction.Triggers>
                            <b:EventTrigger SourceName="LoadedEvent">
                                <b:InvokeCommandAction Command="{Binding EditorLoadedCommand}" CommandParameter="{Binding ElementName=Editor}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </editor:CodeTextEditor>
                </Grid>
            </DataTemplate>
        </TabControl.ContentTemplate>
    </TabControl>
    <!--<editor:CodeTextEditor
            Name="Editor"
            Grid.Row="1"
            FontSize="24"
            WordWrap="True">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis blandit massa at purus cursus semper. Nunc est erat, malesuada quis neque ut, mollis pharetra dolor. Vivamus suscipit magna at orci egestas volutpat. Mauris augue sem, efficitur ac varius nec, rutrum eu velit. Etiam cursus porttitor scelerisque. Vestibulum cursus ante tristique tincidunt sodales. Vestibulum posuere urna vulputate lectus dapibus, sit amet semper nibh maximus.
            Aliquam suscipit, mi at sollicitudin egestas, dui lectus lacinia dui, ut sagittis augue augue a risus. Aenean ac ipsum ullamcorper, egestas sapien vitae, maximus risus. Vivamus facilisis lobortis libero quis sodales. Cras eget odio at metus imperdiet accumsan. Morbi ut feugiat odio. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam vel libero id metus ultricies consequat id id massa.
            Aliquam tristique turpis et justo dignissim, eu elementum tortor porta. Aenean tincidunt dapibus maximus. Curabitur vehicula, mi sed vehicula pulvinar, eros lacus faucibus lorem, vel gravida nisi magna ut tellus. Aliquam venenatis faucibus quam eget efficitur. Fusce eget massa ut odio pellentesque cursus. In posuere velit ex. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus faucibus ullamcorper dui, at molestie nisi lobortis ac. Cras commodo elit non aliquam congue. Fusce lacinia congue mi in congue. Vivamus vel lectus ac leo varius cursus.
        </editor:CodeTextEditor>-->
    <!--<editor:CodeTextEditor
            Name="Editor"
            Grid.Row="1"
            FontSize="24"
            WordWrap="True">
            exampleWithNumber: x
            &quot;A method that illustrates every part of Smalltalk method syntax
            except primitives. It has unary, binary, and keyboard messages,
            declares arguments and temporaries, accesses a global variable
            (but not an instance variable), uses literals (array, character,
            symbol, string, integer, float), uses the pseudo variables
            true, false, nil, self, and super, and has sequence, assignment,
            return and cascade. It has both zero argument and one argument blocks.&quot;
            | y |
            true &amp; false not &amp; (nil isNil) ifFalse: [self halt].
            y := self size + super size.
            #($a #a &quot;a&quot; 1 1.0)
            do: [ :each |
            Transcript show: (each class name);
            show: ' '].
            ^x &lt; y
        </editor:CodeTextEditor>-->
    <!--<editor:CodeTextEditor
            Name="Editor"
            Grid.Row="1"
            FontSize="24"
            WordWrap="True">
            var hashedString = HashingAlgorithms.HashWithSha1("Lorem ipsum dolor sit amet");
        </editor:CodeTextEditor>-->
    <!--<editor:CodeTextEditor
            Name="Editor"
            Grid.Row="1"
            FontSize="24"
            WordWrap="True">

        </editor:CodeTextEditor>-->

</Window>
